import asyncio, json, os, datetime
import db_kernel.statistics_requests as statistics_requests
import db_kernel.requests as db_requests
import main_core.search_chanels as channels_kernel
from datetime import date, timedelta


def last_dwm_statistics():
    """
        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü –∏ –≤–æ–∑–≤—Ä–æ—â–∞–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    """

    # –°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    today = date.today()

    # –î–∞—Ç–∞ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
    yesterday = today - timedelta(days=1)
    # –î–∞—Ç–∞ –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥
    week_ago = today - timedelta(days=7)
    # –î–∞—Ç–∞ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    month_ago = today - timedelta(days=30)


    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    month_signals = statistics_requests.select_signals_by_date(str(month_ago))


    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    week_signals = []
    for signal in month_signals:
        if signal[4] >= str(week_ago):
            week_signals.append(signal)

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    last_day_signals = []
    for signal in week_signals:
        if signal[4] >= str(yesterday):
            last_day_signals.append(signal)

    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å—É—Ç–∫–∏, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü –∏ –≤–µ—Ä–Ω—É—Ç—å –∏—Ö
    return f'<b><u>–°–ò–ì–ù–ê–õ–´:</u></b>\n–ó–∞ —Å—É—Ç–∫–∏ - {len(last_day_signals)} || –ó–∞ –Ω–µ–¥–µ–ª—é - {len(week_signals)} || –ó–∞ –º–µ—Å—è—Ü - {len(month_signals)}'

def last_day_coins():
    """
        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –º–æ–µ–Ω—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—è—Ä–∏—Å—å
        –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É –≤—ã–≤–æ–¥–∏—Ç —Ç–µ –∫–∞–Ω–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ 100% –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å
    """
    # –í—á–µ—Ä–∞—â–Ω—è—è –¥–∞—Ç–∞
    yesterday = date.today() - timedelta(days=1)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    last_day_signals = statistics_requests.select_signals_by_date(yesterday)
    # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 100% —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    full_copy_signals = []
    message_form = '<b><u>–ü–û–î–ù–û–ë–ù–û –û –°–ò–ì–ù–ê–õ–ê–• –ó–ê –°–£–¢–ö–ò:</u></b>\n\n' # –¢–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for signal in last_day_signals:
        # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π –∫–∞–Ω–∞–ª–æ–≤, –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è —Å –∫–æ–∏–Ω–æ–º —Ç—Ä–µ–Ω–¥–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
        channels_info = [signal[6], signal[7], signal[3]] 
        for last_signal in last_day_signals:
            if signal[1] != last_signal[1]: # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∫–∞–Ω–∞–ª–∞
                all_fields_match = (
                    signal[6] == last_signal[6] and 
                    signal[7] == last_signal[7] and 
                    signal[8] == last_signal[8] and 
                    signal[9] == last_signal[9] and 
                    signal[10] == last_signal[10] and 
                    signal[11] == last_signal[11] and 
                    signal[12] == last_signal[12] and 
                    signal[13] == last_signal[13] and 
                    signal[14] == last_signal[14] 
                )
                if all_fields_match:
                    channels_info.append(last_signal[3])
        # –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ 2 –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –Ω–µ—Ç—É 100% —Å–æ–≤–ø–æ–¥–µ–Ω–∏–π, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫
        if len(channels_info) > 3:
            if channels_info not in full_copy_signals:
                full_copy_signals.append(channels_info)

    if len(full_copy_signals) != 0:
        for copy_info in full_copy_signals: 
            message_form_d = f'üíØ {copy_info[0]} –≤ {copy_info[1]} - {copy_info[2]}'
            # –¶–∏–∫–ª –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
            for channel_name in copy_info:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–∏–Ω —Ç—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —É–∂–µ –≤–ø–∏—Å–∞–Ω—ã –≤—Ä—É—á–Ω—É—é
                if channel_name != copy_info[0] and channel_name != copy_info[1] and channel_name != copy_info[2]:
                    message_form_d += f' | {channel_name}'
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏
            if message_form != '<b><u>–ü–û–î–ù–û–ë–ù–û –û –°–ò–ì–ù–ê–õ–ê–• –ó–ê –°–£–¢–ö–ò:</u></b>\n\n':
                checker_flag = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–æ–∫ –∏–º–µ—é—â–µ–≥–æ—Å—è —Å–ø–∏—Å–∫–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ (—ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏)
                for line in message_form.splitlines():
                    for word in message_form_d:
                        if word in line: checker_flag = True
                        else: 
                            checker_flag = False
                            break
                if not checker_flag:
                    # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                    message_form += f'{message_form_d}\n'
            else:
                # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                message_form += f'{message_form_d}\n'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–∏–Ω—ã –∏ —É –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤—Å–µ—Ö –∫–æ–∏–Ω–æ–≤ –≤ —Ç—Ä–µ–Ω–¥
    coins_trend = []
    for signal in last_day_signals:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —ç—Ç–∏ –∫–æ–∏–Ω—ã –≤ —Ç—Ä–µ–Ω–¥–µ
        unice_signal = True
        for c_t in coins_trend:
            if c_t['coin'] == signal[6] and c_t['trend'] == signal[7]:
                unice_signal = False
                break
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç–æ –∫–æ–∏–Ω –∏ —Ç—Ä–µ–Ω–¥ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        if unice_signal:
            coins_trend.append({'coin':signal[6], 'trend':signal[7], 'channels':[]})


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –µ—Å—Ç—å –±–æ–ª—å—à–µ 1–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    channels_list = [] # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    checked_channels = [] # –ú–∞—Å—Å–∏–≤ –≥–¥–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è id –∫–∞–Ω–∞–ª–æ–≤ —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏–ª–∏ –Ω–µ—Ç
    for signal in last_day_signals:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è –ª–∏ –∫–∞–Ω–∞–ª —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if signal[1] in checked_channels: continue # –ï—Å–ª–∏ –¥–∞ —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
        else:
            coinst_and_trends = [] # –ú–∞—Å—Å–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
            # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –µ—â—à—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–∏–≥–Ω–∞–ª—ã
            for channels_signals in last_day_signals:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –±—ã–ª –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
                if signal[1] == channels_signals[1]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–∏–Ω –∏ —Ç—Ä–µ–Ω–¥ —ç—Ç–æ–∫–æ –∫–∞–Ω–∞–ª–∞ –≤ –º–∞—Å—Å–∏–≤
                    coinst_and_trends.append([signal[6], signal[7]])
            # –†–∞—Å—Å—Ñ–∞—Å–æ–≤—ã–≤–µ–º –º–∞—Å—Å–∏–≤ —Å –∫–æ–∏–Ω–∞–º–∏ –∏ —Ç—Ä–µ–Ω–¥–∞–º–∏, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —É–¥–∞–ª—è–µ–º
            removing_indexes = [] # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
            for coin in coinst_and_trends:
                dublicate_flag = False # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∂–µ
                for c_t in coinst_and_trends:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–≤–ø–∞–ª, —Ç–æ–±–∏—à—å –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å–∞–º–æ–≥–æ —Å–µ–±—è
                    if coinst_and_trends.index(coin) != coinst_and_trends.index(c_t):
                        if coin[0] == c_t[0] and coin[1] == c_t[1]:
                            dublicate_flag = True
                            break
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–æ–∏–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –¥–∞ —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                if not dublicate_flag and coinst_and_trends.index(coin) not in removing_indexes:
                    removing_indexes.append(coinst_and_trends.index(coin))

            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–∏–Ω—ã
            for index in removing_indexes:
                coinst_and_trends.pop(index)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–∏–Ω–æ–≤
            for coin in coins_trend:
                for singal_coins in coinst_and_trends:
                    # –ï—Å–ª–∏ –Ω–∞—à—ë–ª—Å—è –Ω—É–∂–Ω—ã–π –∫–æ–∏–Ω –≤ —Ç—Ä–µ–Ω–¥–µ
                    if coin['coin'] == singal_coins[0] and coin['trend'] == singal_coins[1] and signal[3] not in coins_trend[coins_trend.index(coin)]['channels']:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º 2–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
                        coins_trend[coins_trend.index(coin)]['channels'].append(signal[3])
                        break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–¥ –∫–æ–∏–Ω–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for coin in coins_trend:
        if len(coin['channels']) > 0:
            message_form += f"{coin['coin']} –≤ {coin['trend']} - "
            for channel_name in coin['channels']:
                message_form += f'{channel_name} | '
            message_form += '\n'

    return message_form

def last_signal_dates():
    """
        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —É–∂–µ –Ω–µ –≤–Ω–æ—Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—ã
    """
    # –†–∞–∑–º–µ—Ç–∫–∞ –¥–æ –ø–∞–ø–∫–∏ —Å –∫–æ–Ω—Ñ–∏–∞–º–∏
    channels_configs_path = os.path.join(os.getcwd(), "channels_configs")
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open(os.path.join(channels_configs_path, "config.json"), "r") as f:
        keys = json.load(f)
        
    days_for_checking = keys['Statistics_days_for_checking']

    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–Ω–∞–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã —Ä–∞–Ω—å—à–µ —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –∫–æ–Ω—Ñ–∏–≥–∞—Ö
    # –î–∞—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    date_from = date.today() - timedelta(days=int(days_for_checking))
    # –í—Ä–µ–º—è (—á–∞—Å) —Å–µ–π—á–∞—Å
    datetime_now = datetime.datetime.now()

    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    all_signals = statistics_requests.select_signals()
    signals = []
    for signal in all_signals:
        if str(signal[4]) <= str(date_from): signals.append(signal)

    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏ —á–∞—Å–æ–≤ –Ω–µ –±—ã–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤ 
    data = []
    for signal in signals:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª –≤ data
        check_flag = False
        for i in data:
            if signal[1] == i['channel_id']: 
                check_flag = True
                break
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–Ω–æ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ data, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ
        if not check_flag:
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±—ã–ª –ø—Ä–æ–ø—É—Å–∫ 
            signal_datatime = datetime.datetime.combine(datetime.date.fromisoformat(str(signal[4])), datetime.time.fromisoformat(str(signal[5])))
            # –†–∞–∑–¥—Ä–æ–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –¥–∞—Ç—ã
            d_now = datetime.datetime.strptime(str(datetime_now), "%Y-%m-%d %H:%M:%S.%f")
            d_signal = datetime.datetime.strptime(str(signal_datatime), "%Y-%m-%d %H:%M:%S")
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –¥–Ω—è—Ö
            days_difference = (d_now - d_signal).days
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö
            hours_difference = int((d_now - d_signal).seconds / 3600)
            # –ü–æ–ª—É—á–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –Ω–µ –±—ã–ª–æ 
            data.append({
                'channel_id': signal[1],
                'channel_name': signal[3],
                'days':days_difference,
                'hours':hours_difference
            })
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å
    message = '<b><u>–ü–†–û–ü–£–°–ö–ò –°–ò–ì–ù–ê–õ–û–í:</u></b>\n'
    
    for d in data:
        message += f"{d['days']}–¥ {d['hours']}—á - {d['channel_name']}\n"

    return message

def folders_and_channels_statistics():
    """
        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–æ–∏—Ü—ã
        –ê —Ç–∞–∫ –∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–ø–æ–∫
    folders = db_requests.slect_all_active_folders()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–ø–æ–∫
    channels = db_requests.select_all_channels()
    
    # –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
    accaunt_channels_count = len(asyncio.run(channels_kernel.select_all_channels_from_account()))

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å
    message = f'–í—Å–µ–≥–æ –ø–∞–ø–æ–∫ {len(folders)}, –≤ –ø–∞–ø–∫–∞—Ö {len(channels)} –∏–∑ {accaunt_channels_count} –∫–∞–Ω–∞–ª–æ–≤.\n\n'

    for folder in folders:
        # –†–∞—Å—Ñ–∞—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–º –∏ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
        activ_channels = []
        deactiv_channels = []
        testing_channels = []
        for channel in channels:
            if folder[1] == channel[1]:
                if channel[4] == 'active': activ_channels.append(channel)
                elif channel[4] == 'disable': deactiv_channels.append(channel)
                elif channel[4] == 'test': testing_channels.append(channel)
        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        message += f'{folder[2]}:  üü¢  -  {len(activ_channels)}        üî¥  -  {len(deactiv_channels)}      üü°  -  {len(testing_channels)}\n'

    
    return message

def long_and_short_for_last_day():
    """
        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–Ω–≥ –∏ —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∏—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
    yesterday = date.today() - timedelta(days=1)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    last_day_signals = statistics_requests.select_signals_by_date(str(yesterday))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–æ—Ä—Ç –∏ –ª–æ–Ω–≥
    short = 0
    long = 0
    for signal in last_day_signals:
        if signal[7].lower() == 'long': long += 1
        elif signal[7].lower() == 'short': short += 1
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–∏–Ω—ã –∏ —Ç—Ä–µ–Ω–¥ –∫–∞–∫–æ–π –∏ —Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç
    coins_in_trends = []
    for signal in last_day_signals:
        coins_in_trends_check_flag = True
        index_of_cit = -1
        # –ù–∞—Ö–æ–¥–∏–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–∏–Ω
        for cit in coins_in_trends:
            if cit['coin'] == signal[6] and cit['trend'] == signal[7]:
                coins_in_trends_check_flag = False
                index_of_cit = coins_in_trends.index(cit)
                break
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–æ–∏–Ω –≤ —Ç—Ä–µ–Ω–¥–µ —É–∂–µ –µ—Å—Ç—å —Ç–æ –ø–ª—é—Å—É–µ–º –∫–∞–Ω–∞–ª
        if not coins_in_trends_check_flag:
            # –ï—Å–ª–∏ id –∫–∞–Ω–∞–ª–∞ —É–∂–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
            if signal[1] not in coins_in_trends[index_of_cit]['channels']:
                coins_in_trends[index_of_cit]['channels'].append(signal[1]) 
        else:
            # –ï—Å–ª–∏ –∂–µ –∫–æ–∏–Ω–æ–≤ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            coins_in_trends.append({
                'coin': signal[6],
                'trend': signal[7],
                'channels':[]
            })
    print(coins_in_trends)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫–æ–π –∫–æ–∏–Ω  –∫–∞–∫–æ–º —Ç—Ä–µ–Ω–¥–µ —Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç
    cit_message = ''
    for cit in coins_in_trends:
        channels_message_test = ''
        if len(cit['channels']) == 1: channels_message_test = '–∫–∞–Ω–∞–ª'
        elif len(cit['channels']) < 5: channels_message_test = '–∫–∞–Ω–∞–ª–∞'
        else: channels_message_test = '–∫–∞–Ω–∞–ª–æ–≤'
        cit_message += f"\n{cit['coin']} –≤ {cit['trend']} —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç {len(cit['channels'])} {channels_message_test}"
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"<b><u>–¢–†–ï–ù–î –∑–∞ —Å—É—Ç–∫–∏:</u></b>  LONG - {long} | SHORT - {short}\n{cit_message}"

    return message